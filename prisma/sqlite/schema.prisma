// Multi-provider schema (SQLite variant)
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Models (kept identical across providers for now)
model User {
  id           String        @id @default(uuid())
  email        String        @unique
  is_admin     Boolean       @default(false)
  accounts     Account[]
  plaidItems   PlaidItem[]
  institutions Institution[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Institution {
  id                 String      @id @default(uuid())
  userId             String
  plaidInstitutionId String
  name               String
  logo               String?
  primaryColor       String?
  url                String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  accounts           Account[]
  plaidItems         PlaidItem[]

  @@unique([userId, plaidInstitutionId])
}

model Account {
  id            String       @id @default(uuid())
  userId        String
  plaidItemId   String       @unique
  institutionId String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  institution   Institution  @relation(fields: [institutionId], references: [id], onDelete: Cascade)
}

model PlaidItem {
  id               String       @id @default(uuid())
  userId           String
  plaidItemId      String       @unique
  plaidAccessToken String       // Encrypted
  products         String       // Comma-separated list of products
  institutionId    String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  institution      Institution  @relation(fields: [institutionId], references: [id], onDelete: Cascade)
}
