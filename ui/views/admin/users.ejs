<main class="px-4 py-6 sm:px-6 lg:px-8">
  <div class="max-w-6xl mx-auto space-y-6">
    <div class="flex flex-col gap-4 md:flex-row md:items-start md:justify-between">
      <div class="space-y-1">
        <h1 class="text-2xl font-bold text-gray-900 dark:text-gray-100">
          User Management
        </h1>
        <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
          Search, filter, paginate and toggle user activation state.
        </p>
      </div>
      <div class="flex gap-2">
        <button id="refresh-users" class="btn btn-secondary text-sm">Refresh</button>
      </div>
    </div>

    <form
      id="user-filters"
      class="flex flex-column sm:flex-row flex-wrap space-y-4 sm:space-y-0 items-center justify-between pt-4"
    >
      <% /* Precompute filter values & helper to render
      <option>
        without inline EJS in opening tag (Prettier-friendly) */ %>
        <% const activeFilter = (meta && meta.activeFilter) || 'all';
         const roleFilter = (meta && meta.roleFilter) || 'all';
         const pageSizeVal = (meta && meta.pageSize) ? meta.pageSize : 25; %>
        <% function renderOption(value, label, current){ %>
        <% if(value === current){ %>
      </option>

      <option value="<%= value %>" selected><%= label %></option>
      <% } else { %>
      <option value="<%= value %>"><%= label %></option>
      <% } %>
      <% } %>

      <div class="relative">
        <div
          class="absolute inset-y-0 left-0 rtl:inset-r-0 rtl:right-0 flex items-center ps-3 pointer-events-none"
        >
          <svg
            class="w-5 h-5 text-gray-500 dark:text-gray-400"
            aria-hidden="true"
            fill="currentColor"
            viewBox="0 0 20 20"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fill-rule="evenodd"
              d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
              clip-rule="evenodd"
            ></path>
          </svg>
        </div>
        <input
          type="text"
          id="search"
          name="search"
          class="block p-2 ps-10 text-sm text-gray-900 border border-gray-300 rounded-lg w-80 bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          placeholder="Email contains..."
        />
      </div>
      <div class="w-40">
        <select
          id="active"
          name="active"
          class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
        >
          <% renderOption('all','All', activeFilter); %>
          <%
        renderOption('active','Active', activeFilter); %>
          <%
        renderOption('inactive','Inactive', activeFilter); %>
        </select>
      </div>

      <div class="w-40">
        <select
          id="role"
          name="role"
          class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
        >
          <% renderOption('all','All', roleFilter); %>
          <%
        renderOption('admin','Admin', roleFilter); %>
          <%
        renderOption('user','User', roleFilter); %>
        </select>
      </div>

      <div class="w-40">
        <select
          id="pageSize"
          name="pageSize"
          class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
        >
          <% [10,25,50,100].forEach(s => { %>
          <% if(s === pageSizeVal){ %>
          <option value="<%= s %>" selected>
            <%= s %>
            per page
          </option>
          <% } else { %>
          <option value="<%= s %>"><%= s %> per page</option>
          <% } %>
          <% }) %>
        </select>
      </div>
      <div>
        <button type="submit" class="btn btn-primary btn-sm w-full">Apply</button>
      </div>
      <div>
        <button
          type="button"
          id="clear-filters"
          class="btn btn-secondary btn-sm w-full"
        >
          Reset
        </button>
      </div>
    </form>

    <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
      <table
        id="user-table"
        class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400"
        data-page="<%= (meta && meta.page) || 1 %>"
      >
        <thead
          class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400"
        >
          <tr>
            <th scope="col" class="px-6 py-3">Email</th>
            <th scope="col" class="px-6 py-3">Admin</th>
            <th scope="col" class="px-6 py-3">Active</th>
            <th scope="col" class="px-6 py-3">Created</th>
            <th scope="col" class="px-6 py-3">Action</th>
          </tr>
        </thead>
        <tbody id="users-tbody">
          <!-- id fixed to match JS selector -->
          <% (users || []).forEach(u => { %>
          <tr
            data-user-id="<%= u.id %>"
            class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 border-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600"
          >
            <td class="px-6 py-4"><%= u.email %></td>
            <td class="px-6 py-4"><%= u.is_admin ? 'Yes' : 'No' %></td>
            <td class="w-4 p-4"><%= u.active ? 'Active' : 'Inactive' %></td>
            <td class="px-6 py-4"><%= new Date(u.createdAt).toLocaleString() %></td>
            <td class="px-6 py-4">
              <button
                class="toggle-active btn btn-xs <%= u.active ? 'btn-danger-outline' : 'btn-success' %>"
              >
                <% if (u.is_admin) { %>
                Admins cannot be deactivated
                <% } else { %>
                <%= u.active ? 'Deactivate' : 'Activate' %>
                <% } %>
              </button>
            </td>
          </tr>
          <% }) %>
        </tbody>
      </table>
      <nav
        class="flex items-center flex-column flex-wrap md:flex-row justify-between pt-4"
        aria-label="Table navigation"
      >
        <span
          class="text-sm font-normal text-gray-500 dark:text-gray-400 mb-4 md:mb-0 block w-full md:inline md:w-auto"
          >Showing
          <span
            id="meta-range-start"
            class="font-semibold text-gray-900 dark:text-white"
          ></span
          >-<span
            id="meta-range-end"
            class="font-semibold text-gray-900 dark:text-white"
          ></span>
          of
          <span
            id="meta-total"
            class="font-semibold text-gray-900 dark:text-white"
          ></span
        ></span>
        <div class="flex gap-1" id="pagination-controls"></div>
      </nav>
    </div>
  </div>
  <script id="initial-users-meta" type="application/json">
    <%- JSON.stringify(meta || {}) %>
  </script>
  <script>
    (function () {
      const tbody = document.getElementById("users-tbody");
      const refreshBtn = document.getElementById("refresh-users");
      const filterForm = document.getElementById("user-filters");
      const paginationControls = document.getElementById("pagination-controls");
      const metaRangeStart = document.getElementById("meta-range-start");
      const metaRangeEnd = document.getElementById("meta-range-end");
      const metaTotal = document.getElementById("meta-total");
      const clearFiltersBtn = document.getElementById("clear-filters");
      function loadInitialMeta() {
        try {
          const el = document.getElementById("initial-users-meta");
          if (!el) return {};
          return JSON.parse(el.textContent || "{}");
        } catch {
          return {};
        }
      }
      let currentMeta = loadInitialMeta();
      if (!currentMeta || typeof currentMeta !== "object") currentMeta = {};
      if (typeof currentMeta.page !== "number" || currentMeta.page < 1)
        currentMeta.page = 1;
      if (typeof currentMeta.pageSize !== "number" || currentMeta.pageSize < 1)
        currentMeta.pageSize = 25;
      if (typeof currentMeta.total !== "number")
        currentMeta.total = Array.isArray(currentMeta.users)
          ? currentMeta.users.length
          : 0;
      if (typeof currentMeta.totalPages !== "number")
        currentMeta.totalPages = Math.max(
          1,
          Math.ceil(currentMeta.total / currentMeta.pageSize),
        );
      currentMeta.search = currentMeta.search || "";
      currentMeta.activeFilter = currentMeta.activeFilter || "all";
      currentMeta.roleFilter = currentMeta.roleFilter || "all";

      function qs(obj) {
        const params = new URLSearchParams();
        Object.entries(obj).forEach(([k, v]) => {
          if (v !== undefined && v !== null && v !== "") params.set(k, v);
        });
        return params.toString();
      }

      async function fetchUsers(page) {
        if (page) currentMeta.page = page;
        refreshBtn.disabled = true;
        refreshBtn.textContent = "Loading...";
        const query = {
          page: currentMeta.page,
          pageSize: currentMeta.pageSize,
          search: filterForm.search.value.trim(),
          active: filterForm.active.value,
          role: filterForm.role.value,
        };
        try {
          const res = await fetch("/admin/api/users?" + qs(query));
          if (!res.ok) throw new Error("Failed to load users");
          const data = await res.json();
          currentMeta = { ...data.meta };
          renderUsers(data.users || []);
          renderMeta();
          updateUrl();
        } catch (e) {
          alert("Failed to load users");
        } finally {
          refreshBtn.disabled = false;
          refreshBtn.textContent = "Refresh";
        }
      }

      function renderUsers(users) {
        tbody.innerHTML = "";
        users.forEach((u) => {
          let tr = document.createElement("tr");
          tr.dataset.userId = u.id;
          tr.classList.add(
            "bg-white",
            "border-b",
            "dark:bg-gray-800",
            "dark:border-gray-700",
            "border-gray-200",
            "hover:bg-gray-50",
            "dark:hover:bg-gray-600",
          );
          tr.innerHTML = `
            <td class="px-6 py-4 font-mono">${u.email}</td>
            <td class="px-6 py-4">${u.is_admin ? "Yes" : "No"}</td>
            <td class="px-4 py-4">${u.active ? "Active" : "Inactive"}</td>
            <td class="px-6 py-4">${new Date(u.createdAt).toLocaleString()}</td>
            <td class="px-6 py-4">
              ${
                u.is_admin
                  ? "Admins cannot be deactivated"
                  : `<button class="toggle-active btn btn-xs ${u.active ? "btn-danger-outline" : "btn-success"}">${u.active ? "Deactivate" : "Activate"}</button>`
              }
            </td>`;
          tbody.appendChild(tr);
        });
      }

      function renderMeta() {
        const start =
          currentMeta.total === 0
            ? 0
            : (currentMeta.page - 1) * currentMeta.pageSize + 1;
        const end = Math.min(
          currentMeta.total,
          currentMeta.page * currentMeta.pageSize,
        );
        metaRangeStart.textContent = start;
        metaRangeEnd.textContent = end;
        metaTotal.textContent = currentMeta.total;
        paginationControls.innerHTML = "";
        const maxButtons = 7;
        let startPage = Math.max(1, currentMeta.page - Math.floor(maxButtons / 2));
        let endPage = startPage + maxButtons - 1;
        if (endPage > currentMeta.totalPages) {
          endPage = currentMeta.totalPages;
          startPage = Math.max(1, endPage - maxButtons + 1);
        }
        const addBtn = (label, page, disabled = false, active = false) => {
          const btn = document.createElement("button");
          btn.type = "button";
          btn.textContent = label;
          btn.className =
            "btn btn-xs " + (active ? "btn-primary" : "btn-secondary-outline");
          if (disabled) {
            btn.disabled = true;
            btn.classList.add("opacity-50");
          }
          btn.addEventListener("click", () => fetchUsers(page));
          paginationControls.appendChild(btn);
        };
        addBtn("⟨", Math.max(1, currentMeta.page - 1), currentMeta.page === 1);
        for (let p = startPage; p <= endPage; p++)
          addBtn(String(p), p, false, p === currentMeta.page);
        addBtn(
          "⟩",
          Math.min(currentMeta.totalPages, currentMeta.page + 1),
          currentMeta.page === currentMeta.totalPages,
        );
      }

      function updateUrl() {
        const query = {
          page: currentMeta.page,
          pageSize: currentMeta.pageSize,
          search: filterForm.search.value.trim(),
          active: filterForm.active.value,
          role: filterForm.role.value,
        };
        const qsStr = qs(query);
        const newUrl = window.location.pathname + (qsStr ? "?" + qsStr : "");
        window.history.replaceState({}, "", newUrl);
      }

      tbody.addEventListener("click", async (e) => {
        const btn = e.target.closest("button.toggle-active");
        if (!btn) return;
        const tr = btn.closest("tr");
        const id = tr.dataset.userId;
        btn.disabled = true;
        btn.textContent = "Saving...";
        try {
          const res = await fetch(`/admin/api/users/${id}/active`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({}),
          });
          if (!res.ok) {
            throw new Error("Failed");
          }
          const { user } = await res.json();
          // update row only
          tr.querySelector("td:nth-child(3) span").className =
            `status-pill ${user.active ? "bg-green-100 text-green-700 dark:bg-green-700/30 dark:text-green-300" : "bg-red-100 text-red-700 dark:bg-red-700/30 dark:text-red-300"}`;
          tr.querySelector("td:nth-child(3) span").textContent = user.active
            ? "Active"
            : "Inactive";
          btn.className = `toggle-active btn btn-xs ${user.active ? "btn-danger-outline" : "btn-success"}`;
          btn.textContent = user.active ? "Deactivate" : "Activate";
        } catch (err) {
          alert("Toggle failed");
        } finally {
          btn.disabled = false;
        }
      });

      refreshBtn.addEventListener("click", () => fetchUsers());
      filterForm.addEventListener("submit", (e) => {
        e.preventDefault();
        currentMeta.page = 1;
        currentMeta.pageSize = parseInt(filterForm.pageSize.value, 10);
        fetchUsers();
      });
      clearFiltersBtn.addEventListener("click", () => {
        filterForm.search.value = "";
        filterForm.active.value = "all";
        filterForm.role.value = "all";
        filterForm.pageSize.value = "25";
        currentMeta.page = 1;
        currentMeta.pageSize = 25;
        fetchUsers();
      });

      // Hydrate meta display for initial SSR batch
      renderMeta();
    })();
  </script>
</main>
