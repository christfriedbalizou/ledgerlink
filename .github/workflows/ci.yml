name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: 'npm'
      - name: Cache Prisma Client
        id: cache-prisma-lint
        uses: actions/cache@v4
        with:
          path: node_modules/.prisma
          key: prisma-${{ runner.os }}-${{ hashFiles('prisma/schema.prisma') }}
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: 'npm'
      - name: Cache Prisma Client
        id: cache-prisma-test
        uses: actions/cache@v4
        with:
          path: node_modules/.prisma
          key: prisma-${{ runner.os }}-${{ hashFiles('prisma/schema.prisma') }}
      - name: Install dependencies
        run: npm ci
      - name: Copy .env.example to .env
        run: cp .env.example .env
      - name: Run tests with coverage
        run: npm test -- --coverage --coverageReporters=text-summary --maxWorkers=2
        env:
          PLAID_CLIENT_ID: ${{ secrets.PLAID_CLIENT_ID }}
          PLAID_SECRET: ${{ secrets.PLAID_SECRET }}
          PLAID_ENCRYPTION_KEY: ${{ secrets.PLAID_ENCRYPTION_KEY }}
      - name: Enforce coverage threshold
        run: |
          echo "Checking coverage threshold"
          grep -E 'All files.*\b([0-9]{2,3})%' coverage/coverage-summary.txt || true
          node <<'EOF'
          import fs from 'fs';
          const summaryPath = 'coverage/coverage-summary.json';
          if (!fs.existsSync(summaryPath)) process.exit(0);
          const data = JSON.parse(fs.readFileSync(summaryPath,'utf8'));
          const totals = data.total;
          const thresholds = { lines: 60, statements: 60, functions: 50, branches: 40 };
          let fail = false;
          for (const [k,v] of Object.entries(thresholds)) {
            if (totals[k].pct < v) { console.error(`Coverage for ${k} ${totals[k].pct}% < ${v}%`); fail = true; }
          }
          if (fail) process.exit(1);
          EOF
      - name: Upload coverage artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage

  matrix-test:
    runs-on: ubuntu-latest
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        node: [20, 22]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Copy .env.example to .env
        run: cp .env.example .env
      - name: Run tests
        run: npm test -- --maxWorkers=2
        env:
          PLAID_CLIENT_ID: ${{ secrets.PLAID_CLIENT_ID }}
          PLAID_SECRET: ${{ secrets.PLAID_SECRET }}
          PLAID_ENCRYPTION_KEY: ${{ secrets.PLAID_ENCRYPTION_KEY }}

  security_audit:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 22
      - name: Install production deps
        run: npm ci --omit=dev
      - name: npm audit (production) fail on high/critical
        run: |
          set -e
          OUT=$(npm audit --production --json || true)
          echo "$OUT" | jq '.metadata.vulnerabilities' || true
          HIGH=$(echo "$OUT" | jq '.metadata.vulnerabilities.high')
          CRITICAL=$(echo "$OUT" | jq '.metadata.vulnerabilities.critical')
          if [ -z "$HIGH" ] || [ "$HIGH" = "null" ]; then HIGH=0; fi
          if [ -z "$CRITICAL" ] || [ "$CRITICAL" = "null" ]; then CRITICAL=0; fi
          if [ "$HIGH" -gt 0 ] || [ "$CRITICAL" -gt 0 ]; then
            echo "High or Critical vulnerabilities detected (high=$HIGH critical=$CRITICAL). Failing build." >&2
            exit 1
          fi
          echo "No high/critical vulnerabilities detected."
      - name: Secret scan (trufflehog)
        uses: trufflesecurity/trufflehog@v3.81.6
        with:
          path: .
          base: ${{ github.event.pull_request.base.sha || 'HEAD~1' }}
          head: ${{ github.sha }}
          fail: true
          extra_args: '--only-verified'
